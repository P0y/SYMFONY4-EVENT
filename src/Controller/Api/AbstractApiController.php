<?phpnamespace App\Controller\Api;use App\Entity\AbstractEntity;use Exception;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Validator\Validator\ValidatorInterface;/** * Class AbstractApiController * @package App\Controller */abstract class AbstractApiController extends AbstractController{	/**	 * @var array $errors	 */	private $errors = [];	/**	 * @var int $status	 */	private $status = Response::HTTP_OK;	/**	 * @param int    $id	 * @param string $className	 *	 * @return array	 * @throws Exception	 */	protected function getItem(int $id, string $className): array	{		$repository = $this->getDoctrine()->getRepository($className);		$entity     = $repository->find($id);		if (empty($entity)) {			throw new \Exception("Event don't found");		}		return $entity->serializer();	}	/**	 * @param array              $dataRequest	 * @param AbstractEntity     $item	 * @param ValidatorInterface $validator	 *	 * @return array	 */	protected function addItem(array $dataRequest, AbstractEntity $item, ValidatorInterface $validator): array	{		$item = $item->populate($dataRequest);		if($this->hasErrors($validator, $item)) {			$data['errors'] = $this->getErrors();			$this->setStatus(Response::HTTP_UNPROCESSABLE_ENTITY);		} else {			$entityManager = $this->getDoctrine()->getManager();			$entityManager->persist($item);			$entityManager->flush();			$data = $item->serializer();		}		return $data ?? [];	}	/**	 * @param array $data	 *	 * @return Response	 */	protected function view(array $data = []): Response	{		$response = new JsonResponse($data, $this->getStatus());		return $response;	}	/**	 * @param Request $request	 *	 * @return array	 * @throws Exception	 */	protected function getDataPost(Request $request): array	{		if (empty($dataRequest = $request->getContent())) {			throw new Exception("No data send");		}		return json_decode($dataRequest, true);	}	/**	 * @param ValidatorInterface $validator	 * @param AbstractEntity     $entity	 *	 * @return bool	 */	protected function hasErrors(ValidatorInterface $validator, AbstractEntity $entity): bool	{		$this->errors = $validator->validate($entity);		return \count($this->errors) > 0;	}	/**	 * @return array	 */	protected function getErrors(): array	{		foreach ($this->errors as $error) {			$return[$error->getPropertyPath()] = $error->getMessage();		}		return $return ?? [];	}	/**	 * @return int	 */	public function getStatus(): int	{		return $this->status;	}	/**	 * @param int $status	 */	public function setStatus(int $status)	{		$this->status = $status;	}}