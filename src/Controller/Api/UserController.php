<?phpnamespace App\Controller\Api;use App\Entity\User;use App\Service\MailerService;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Validator\Validator\ValidatorInterface;use Symfony\Contracts\Translation\TranslatorInterface;/** * Class UserController * @package App\Controller */class UserController extends AbstractApiController{	/**	 * @param int $id	 *	 * @return Response	 */	public function getOneUser(int $id): Response // getUser is defined in ControllerTrait and this create an error...	{		$data = $this->getItem($id, User::class);		return $this->view($data);	}	/**	 * @param Request             $request	 * @param ValidatorInterface  $validator	 * @param MailerService       $mailerService	 * @param TranslatorInterface $translator	 *	 * @return Response	 */	public function addUser(Request $request, ValidatorInterface $validator, MailerService $mailerService, TranslatorInterface $translator): Response	{		$user = new User();		$dataRequest = $this->getDataPost($request);		$dataRequest['passwordEncode'] = $dataRequest['password'] ?? '';		$data = $this->addItem($dataRequest, $user, $validator);		if (empty($data['errors'])) {			$subject = $translator->trans('register.subject');			$data['title'] = $subject;			$mailerService->sendEmail($subject, $data['email'], $data, 'register.html.twig');		}		return $this->view($data);	}	/**	 * @param Request             $request	 * @param TranslatorInterface $translator	 *	 * @return Response	 */	public function authenticate(Request $request, TranslatorInterface $translator): Response	{		$dataRequest = $this->getDataPost($request);		if (!empty($dataRequest['email']) || !empty($dataRequest['password'])) {			$repository = $this->getDoctrine()->getRepository(User::class);			$user = $repository->findOneBy([				'email' => $dataRequest['email'],			]);			if (!empty($user)) {				/* @var User $user */				$success = $user->isPasswordValid($dataRequest['password'], $user->getPasswordEncode());				if ($success) {					$data = [						'success' => true,						'entity'  => $user->serializer(),					];				}			}		}		return $this->view($data ?? [				'success' => false,				'errors'  => $translator->trans('login.email_or_password_not_valid', [], 'validators'),			]);	}}